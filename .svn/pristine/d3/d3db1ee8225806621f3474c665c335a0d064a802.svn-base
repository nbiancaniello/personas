package com.mercel.personas.persistence;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.inssjp.commons.paging.PagingLoadConfig;
import com.mercel.personas.model.Persona;

public class PersonaDAOImpl implements PersonaDAO{
	public List<Persona> personas = new ArrayList<Persona>();
	
	public PersonaDAOImpl() {
		
		personas.add(new Persona("1","Nicolas","Biancaniello","DNI","32483157","01-09-1986"));		
		personas.add(new Persona("2","Nicolas","Lobruno","DNI","38902437","10-12-1993"));
		personas.add(new Persona("3","Alejandro","Acuña","DNI","31992477","29-10-1985"));
		personas.add(new Persona("4","Alejandro","Valencia","DNI","35441820","22-08-1990"));
		personas.add(new Persona("5","Alejo","Naveira","DNI","27465109","31-03-1980"));
	}
	
	public List<Persona> findPersonas(PagingLoadConfig paginado, String sortField, String sortOrder){
		
		ordenarPersonas(sortField, sortOrder);
	
		if ((paginado.getOffset() + paginado.getLimit()) > personas.size())
			paginado.setLimit(personas.size()-paginado.getLimit());
		
		return personas.subList(paginado.getOffset(), paginado.getOffset() + paginado.getLimit());
	}
	
	public void ordenarPersonas(String sortField, String sortOrder){
		
		switch (sortField.toString()) {
        case "id":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_ID);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_ID_DESC);
        	break;
        case "nombre":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_NOMBRE);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_NOMBRE_DESC);
        	break;
        case "apellido":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_APELLIDO);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_APELLIDO_DESC);
        	break;
        case "tipo_doc":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_TIPODOC);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_TIPODOC_DESC);
        	break;
        case "nro_doc":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_NRODOC);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_NRODOC_DESC);
        	break;
        case "fecha_nacimiento":
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_FECHANAC);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_FECHANAC_DESC);
        	break;
        default:
        	if (sortOrder == "asc")
        		Collections.sort(personas, Persona.COMPARAR_POR_ID);
        	else
        		Collections.sort(personas, Persona.COMPARAR_POR_ID_DESC);
        	break;
        }
	}
	
	public int getPersonasCantidad(){
		return personas.size();
	}

	@Override
	public List<Persona> findPersonas() {
		return personas;
	}
	
}
