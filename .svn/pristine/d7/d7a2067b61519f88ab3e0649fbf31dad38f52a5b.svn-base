package com.mercel.personas.service;

import java.util.ArrayList;
import java.util.List;

import com.inssjp.commons.paging.PagingLoadConfig;
import com.mercel.personas.model.Persona;
import com.mercel.personas.persistence.PersonaDAO;
import com.mercel.personas.persistence.PersonaInMemoryDAOImpl;
//import com.mercel.personas.persistence.PersonaJSONDAOImpl;
//import com.mercel.personas.persistence.PersonaXMLDAOImpl;
import com.mercel.personas.validations.ValidadorDatos;


public class PersonaServiceImpl implements PersonaService {
	
	PersonaDAO personaDAO = new PersonaInMemoryDAOImpl();
	//PersonaDAO personaDAO = new PersonaJSONDAOImpl();
	//PersonaDAO personaDAO = new PersonaXMLDAOImpl();
	
	public List<Persona> findPersonas(PagingLoadConfig paginado, String sortField, String sortOrder, String keyword, String columnSearch){
		return personaDAO.findPersonas(paginado, sortField, sortOrder,keyword,columnSearch);
	}
	
	public int getPersonasCantidad(){
		return personaDAO.getPersonasCantidad();
	}
	
	public String save(Persona tmpPersona){
		return personaDAO.save(tmpPersona);
	}
	
	public List<String> validarDatos(Persona persona){
		
		List<String> listadoValidaciones = new ArrayList<String>();
		
		if (ValidadorDatos.esVacio(persona.getNombre()))
			listadoValidaciones.add("Nombre Vacío");
    	if (!ValidadorDatos.esAlfabetico(persona.getNombre()))
    		listadoValidaciones.add("Nombre Inválido");
    	if (!ValidadorDatos.verificarLongitud(persona.getNombre(), 30))
    		listadoValidaciones.add("Nombre con longitud inválida");
    	
    	if (ValidadorDatos.esVacio(persona.getApellido()))
    		listadoValidaciones.add("Apellido Vacío"); 	
    	if (!ValidadorDatos.esAlfabetico(persona.getApellido()))
    		listadoValidaciones.add("Apellido Inválido");
    	if (!ValidadorDatos.verificarLongitud(persona.getApellido(), 50))
    		listadoValidaciones.add("Apellido con longitud inválida");
    	
    	if (ValidadorDatos.esVacio(Integer.toString(persona.getNro_doc())))
    		listadoValidaciones.add("Número de Documento Vacío");
    	if (!ValidadorDatos.esNumerico(persona.getNro_doc()))
    		listadoValidaciones.add("Número de Documento Inválido");
    	if (!ValidadorDatos.verificarLongitud(Integer.toString(persona.getNro_doc()), 8))
    		listadoValidaciones.add("Número con longitud inválida");
    	
    	if (ValidadorDatos.esVacio(persona.getFecha_nacimiento().toString()))
    		listadoValidaciones.add("Fecha de Nacimiento Vacía");
    	if(!ValidadorDatos.validarFecha(persona.getFecha_nacimiento()))
    		listadoValidaciones.add("Fecha de Nacimiento Inválida");
    	
    	return listadoValidaciones;
    	
	}
 
	public String delete(Persona personaToRemove){
		return personaDAO.delete(personaToRemove);
	}

}
